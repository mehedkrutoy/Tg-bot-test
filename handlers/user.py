from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice
from typing import Union

from keyboards.inline import get_start_keyboard, get_payment_methods_keyboard, get_profile_keyboard, get_back_to_menu_keyboard
from keyboards.reply import get_main_menu_keyboard
from states.states import Form, ReplenishStates, NumberInput
from database.methods import (
    get_user_balance, 
    get_user_profile, 
    get_user, 
    register_user,
    check_used_promo,
    activate_promo_code,
    has_used_any_promo,
    check_promo_code,
    use_promo_code,
    update_balance
)
from config.config import config

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    if not message.from_user or not message.text or not message.bot:
        return
        
    args = message.text.split()
    referrer_id = None
    if len(args) > 1:
        try:
            referrer_id = int(args[1])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
            referrer = await get_user(referrer_id)
            if not referrer or int(str(referrer.user_id)) == message.from_user.id:
                referrer_id = None
        except ValueError:
            referrer_id = None
            
    # ÔøΩÔøΩÔøΩÔøΩ–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await register_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        referrer_id=referrer_id
    )
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard()
    )

        

@router.message(Command("hui"))
async def hui(message: Message):
    await message.answer("""
‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñëÔøΩÔøΩ‚ñà‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïù
""")


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    if not callback.from_user or not callback.message or not callback.bot:
        return
        
    user_data = await get_user_profile(callback.from_user.id)
    if user_data:
        balance, total_referrals = user_data
        ref_link = f"https://t.me/{(await callback.bot.me()).username}?start={callback.from_user.id}"
        
        profile_text = f"""üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
        
üí∞ –ë–∞–ª–∞–Ω—Å: {balance} RUB
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{ref_link}

üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5% –æ—Ç –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π!"""

        await callback.bot.edit_message_text(
            text=profile_text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=get_profile_keyboard(callback.from_user.id)
        )
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)

@router.callback_query(F.data == "calculator")
async def handle_calculator(callback: CallbackQuery, state: FSMContext):
    if not callback.message or not callback.bot:
        return
        
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    await state.set_state(NumberInput.waiting_for_number)

@router.message(NumberInput.waiting_for_number)
async def process_number(message: Message, state: FSMContext):
    if not message.text:
        return
        
    try:
        value = float(message.text.replace(",", "."))
        result = config.COURSE_RATE * value
        await message.answer(
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_main_menu_keyboard()
        )

@router.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu_button(message: Message):
    if not message.from_user:
        return
        
    await message.answer(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard()
    )

@router.callback_query(F.data == "news")
async def show_news(callback: CallbackQuery):
    if not callback.message or not callback.bot:
        return
    await callback.bot.edit_message_text(
        text=f"–ù–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: {config.GROUP_NEWS}",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=get_start_keyboard()
    )

@router.callback_query(F.data == "reviews")
async def show_reviews(callback: CallbackQuery):
    if not callback.message or not callback.bot:
        return
    await callback.bot.edit_message_text(
        text=f"–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã: {config.GROUP_REVIEWS}",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=get_start_keyboard()
    )

@router.callback_query(F.data == "course")
async def show_course(callback: CallbackQuery):
    if not callback.message or not callback.bot:
        return
    await callback.bot.edit_message_text(
        text=f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {config.COURSE_RATE}",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=get_start_keyboard()
    )

@router.callback_query(F.data == "withdraw")
async def show_withdraw(callback: CallbackQuery):
    if not callback.message or not callback.bot:
        return
    await callback.bot.edit_message_text(
        text="–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=get_back_to_menu_keyboard()
    )

@router.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    )

# @router.message(F.text.startswith("PROMO_"))
# async def activate_promo(message: Message):
#     if not message.from_user:
#         return
        
#     promo_code = message.text.strip()
#     user_id = message.from_user.id

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     promo_data = await check_promo_code(promo_code, user_id)
    
#     if not promo_data:
#         await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
#         return

#     # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
#     bonus_amount = promo_data['amount']
    
#     # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
#     await use_promo_code(user_id, promo_code)

#     # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await update_balance(user_id, bonus_amount)

#     await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_amount} RUB")

@router.message(Command("1"))
async def send_sticker(message: Message):
    sticker_id = "CAACAgIAAxkBAAENZPtnbcKQce9Qv-16VAXk7lBfiJJ5GgAC_x8AAsqp2Eho4h_hqzosBTYE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID —Å—Ç–∏–∫–µ—Ä–∞
    await message.answer_sticker(sticker_id) 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def unknown_command(message: Message):
    await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.") 

@router.callback_query(F.data == "activate_promo")
async def activate_promo(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_for_promo)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")

@router.message(Form.waiting_for_promo)
async def process_promo(message: Message, state: FSMContext):
    promo_code = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    promo_data = await check_promo_code(promo_code, user_id)
    
    if not promo_data:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
    bonus_amount = await activate_promo_code(user_id, promo_code)

    if bonus_amount is not None:
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_amount} RUB")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
    
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ 