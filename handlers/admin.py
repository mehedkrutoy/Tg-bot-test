from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from database.methods import (
    get_user_balance, 
    get_user_profile, 
    create_promo_code, 
    get_all_users, 
    update_balance,
    use_promo_code
)
from config.config import config
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from states.states import Form
import sys
import os
from restart import restart_bot
from aiogram.fsm.state import State, StatesGroup
import logging
from aiogram.fsm.storage.base import StorageKey
import asyncio

logger = logging.getLogger(__name__)

router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º ADMIN_IDS
ADMIN_IDS = config.ADMIN_IDS.keys()

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def is_moderator(user_id: int) -> bool:
    return user_id in config.MODERATOR_CHAT_IDS or user_id in ADMIN_IDS

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
        
    await message.answer(
        "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞\n"
        "/create_promo - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/add_mod - –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        "/remove_mod - –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        "/list_mods - –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
        "/clear_balance - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    )

@router.message(Command("create_promo"))
async def create_promo(message: Message):
    if not message.from_user or not is_admin(message.from_user.id) or not message.text:
        return
        
    args = message.text.split()
    if len(args) != 5:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_promo <–∫–æ–¥> <—Å—É–º–º–∞/–ø—Ä–æ—Ü–µ–Ω—Ç> "
            "<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π> <—Ç–∏–ø: sum/percent>"
        )
        return
        
    try:
        code = args[1]
        amount = float(args[2])
        uses = int(args[3])
        promo_type = args[4]
        
        if promo_type not in ['sum', 'percent']:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞")
            
        is_percentage = promo_type == 'percent'
        
        if is_percentage and (amount <= 0 or amount > 100):
            await message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
            return
            
        success = await create_promo_code(code, amount, uses, is_percentage)
        
        if success:
            await message.answer(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω:\n"
                f"–ö–æ–¥: {code}\n"
                f"{'–ü—Ä–æ—Ü–µ–Ω—Ç' if is_percentage else '–°—É–º–º–∞'}: {amount}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
            
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("stats"))
async def show_stats(message: Message):
    if not message.from_user or not is_admin(message.from_user.id):
        return
        
    users = await get_all_users()
    total_users = len(users)
    total_balance = sum(float(str(user.balance)) for user in users)
    
    await message.answer(
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} RUB"
    )

class BroadcastStates(StatesGroup):
    waiting_for_message = State()

@router.message(Command("broadcast"), F.from_user.id.in_(ADMIN_IDS))
async def broadcast_command(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç):")
    await state.set_state(BroadcastStates.waiting_for_message)

@router.message(StateFilter(BroadcastStates.waiting_for_message), F.from_user.id.in_(ADMIN_IDS))
async def process_broadcast_message(message: Message, state: FSMContext):
    if not message.bot:
        return
        
    users = await get_all_users()
    sent = 0
    blocked = 0
    
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user in users:
        try:
            user_id = int(str(user.user_id))
            if message.text:
                await message.bot.send_message(user_id, message.text)
            elif message.photo:
                await message.bot.send_photo(
                    user_id,
                    message.photo[-1].file_id,
                    caption=message.caption
                )
            elif message.video:
                await message.bot.send_video(
                    user_id,
                    message.video.file_id,
                    caption=message.caption
                )
            elif message.video_note:
                await message.bot.send_video_note(
                    user_id,
                    message.video_note.file_id
                )
            elif message.document:
                await message.bot.send_document(
                    user_id,
                    message.document.file_id,
                    caption=message.caption
                )
            elif message.voice:
                await message.bot.send_voice(
                    user_id,
                    message.voice.file_id,
                    caption=message.caption
                )
            elif message.audio:
                await message.bot.send_audio(
                    user_id,
                    message.audio.file_id,
                    caption=message.caption
                )
            elif message.animation:
                await message.bot.send_animation(
                    user_id,
                    message.animation.file_id,
                    caption=message.caption
                )
            sent += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            blocked += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
            continue
            
    await message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked}"
    )
    await state.clear()

@router.message(Command("add_mod"))
async def add_moderator(message: Message):
    if not message.from_user or not is_admin(message.from_user.id) or not message.text:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
        
    args = message.text.split()
    if len(args) != 3:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_mod <id> <–∏–º—è>\n"
            "–ü—Ä–∏–º–µ—Ä: /add_mod 123456789 '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä #1'"
        )
        return
        
    try:
        mod_id = int(args[1])
        mod_name = args[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        if mod_id in config.MODERATOR_CHAT_IDS:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        config.MODERATOR_CHAT_IDS[mod_id] = mod_name
        await message.answer(
            f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"ID: {mod_id}\n"
            f"–ò–º—è: {mod_name}"
        )
        
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

@router.message(Command("remove_mod"))
async def remove_moderator(message: Message):
    if not message.from_user or not is_admin(message.from_user.id) or not message.text:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
        
    args = message.text.split()
    if len(args) != 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_mod <id>\n"
            "–ü—Ä–∏–º–µ—Ä: /remove_mod 123456789"
        )
        return
        
    try:
        mod_id = int(args[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        if mod_id not in config.MODERATOR_CHAT_IDS:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
            return
            
        # –£–¥–∞–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        mod_name = config.MODERATOR_CHAT_IDS.pop(mod_id)
        await message.answer(
            f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:\n"
            f"ID: {mod_id}\n"
            f"–ò–º—è: {mod_name}"
        )
        
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

@router.message(Command("list_mods"))
async def list_moderators(message: Message):
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
        
    if not config.MODERATOR_CHAT_IDS:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
        return
        
    mods_list = "\n".join(
        f"‚Ä¢ {name} (ID: {mod_id})"
        for mod_id, name in config.MODERATOR_CHAT_IDS.items()
    )
    
    await message.answer(
        f"üìù –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n\n{mods_list}"
    )

@router.message(Command("approve"))
async def approve_payment(message: Message, state: FSMContext):
    if not message.from_user or message.from_user.id != 5349222597 and 881317631 or not message.text or not message.bot:
        return
        
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <user_id> <amount>")
        return
        
    try:
        user_id = int(args[1])
        amount = float(args[2])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_key = StorageKey(bot_id=message.bot.id, user_id=user_id, chat_id=user_id)
        user_state = FSMContext(storage=state.storage, key=storage_key)
        
        state_data = await user_state.get_data()
        active_promo = state_data.get('active_promo')
        
        if active_promo:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
            if active_promo['is_percentage']:
                bonus = amount * (active_promo['amount'] / 100)
            else:
                bonus = active_promo['amount']
            amount += bonus
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            await use_promo_code(user_id, active_promo['code'])
            await user_state.update_data(active_promo=None)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if await update_balance(user_id, amount):
            await message.bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} RUB –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
            )
            await message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("deny"))
async def deny_payment(message: Message):
    if not message.from_user or message.from_user.id != 5349222597 and 881317631 or not message.text or not message.bot:
        return
        
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deny <user_id> <amount>")
        return
        
    try:
        user_id = int(args[1])
        amount = float(args[2])
        
        await message.bot.send_message(
            user_id,
            f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} RUB –æ—Ç–∫–ª–æ–Ω–µ–Ω!\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("clear_balance"))
async def clear_balance(message: Message):
    if not message.from_user or not is_admin(message.from_user.id) or not message.text:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
        
    args = message.text.split()
    if len(args) != 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clear_balance <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /clear_balance 123456789"
        )
        return
        
    try:
        user_id = int(args[1])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ 0
        if await update_balance(user_id, -await get_user_balance(user_id)):
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞")
            
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}") 

@router.message(Command("restart"))
async def restart_command(message: Message):
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
        
    await message.answer("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        restart_bot()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {str(e)}") 