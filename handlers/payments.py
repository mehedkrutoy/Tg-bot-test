from aiogram import Router, F
from aiogram.types import Message, PreCheckoutQuery, CallbackQuery, LabeledPrice, FSInputFile
from aiogram.fsm.context import FSMContext
from database.methods import update_balance, check_promo_code, use_promo_code, create_payment, has_used_any_promo, activate_promo_code
from config.config import config
from keyboards.inline import (
    get_start_keyboard, 
    get_payment_methods_keyboard, 
    get_back_to_menu_keyboard,
    get_profile_keyboard
)
from states.states import Form, PaymentStates
from aiogram.fsm.state import State, default_state
from utils.logger import log_user_action, log_error
from utils.misc import format_money

router = Router()

PAYMENT_METHODS = {
    "pay_sber": {
        "name": "–°–±–µ—Ä–±–∞–Ω–∫",
        "number": "2202 2024 2222 2222"
    },
    "pay_tinkoff": {
        "name": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
        "number": "5536 9137 9999 9999"
    },
    "pay_ozon": {
        "name": "OZON",
        "number": "2222 2222 2222 2222"
    }
}

MIN_AMOUNT = 50
MAX_AMOUNT = 50000

@router.callback_query(F.data == "card_payment")
async def process_card_payment(callback: CallbackQuery):
    if not callback.message or not callback.bot:
        return
        
    try:
        log_user_action(callback, "initiated card payment")
        await callback.bot.send_invoice(
            chat_id=callback.message.chat.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É",
            payload="payment_balance",
            provider_token=config.PAYMENT_TOKEN,
            currency="RUB",
            prices=[
                LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", amount=5000)
            ]
        )
    except Exception as e:
        log_error(e, "process_card_payment")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_start_keyboard()
        )

@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def process_successful_payment(message: Message, state: FSMContext):
    if not message.successful_payment or not message.from_user:
        return
        
    payment_amount = message.successful_payment.total_amount / 100
    bonus_amount = 0
    
    state_data = await state.get_data()
    active_promo = state_data.get('active_promo')
    
    if active_promo:
        if active_promo['is_percentage']:
            bonus_amount = payment_amount * (active_promo['amount'] / 100)
        else:
            bonus_amount = active_promo['amount']
        payment_amount += bonus_amount
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await use_promo_code(message.from_user.id, active_promo['code'])

    # –°–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    await create_payment(message.from_user.id, payment_amount)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_balance(message.from_user.id, payment_amount)
    await state.clear()
    
    success_message = f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {payment_amount} RUB —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!"
    if bonus_amount > 0:
        success_message += f"\nüíé –ë–æ–Ω—É—Å: {bonus_amount} RUB"
    
    await message.answer(
        success_message,
        reply_markup=get_start_keyboard()
    )

@router.callback_query(F.data == "replenish")
async def show_payment_methods(callback: CallbackQuery):
    if not callback.message or not callback.bot:
        return
        
    await callback.bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=get_payment_methods_keyboard()
    )

@router.callback_query(F.data.startswith("pay_"))
async def request_payment_amount(callback: CallbackQuery, state: FSMContext):
    if not callback.message or not callback.bot:
        return
        
    payment_method = callback.data
    await state.update_data(payment_method=payment_method)
    
    await callback.bot.edit_message_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ RUB\n\n"
        f"üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_AMOUNT} RUB\n"
        f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MAX_AMOUNT} RUB",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(PaymentStates.waiting_for_amount)

@router.message(PaymentStates.waiting_for_amount)
async def process_payment_amount(message: Message, state: FSMContext):
    if not message.text:
        return
        
    try:
        amount = float(message.text.replace(",", "."))
        if amount < MIN_AMOUNT or amount > MAX_AMOUNT:
            await message.answer(
                f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {MIN_AMOUNT} –¥–æ {MAX_AMOUNT} RUB",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(payment_amount=amount)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        state_data = await state.get_data()
        active_promo = state_data.get('active_promo')
        
        if active_promo:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
            if active_promo['is_percentage']:
                bonus = amount * (active_promo['amount'] / 100)
                bonus_text = f"{active_promo['amount']}% ({bonus} RUB)"
            else:
                bonus = active_promo['amount']
                bonus_text = f"{bonus} RUB"
                
            total_amount = amount + bonus
            promo_info = f"\nüéÅ –ë–æ–Ω—É—Å –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É: {bonus_text}\nüíé –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–∏—Ç–µ: {total_amount} RUB"
        else:
            promo_info = "\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!"
            
        payment_method = state_data['payment_method']
        payment_info = PAYMENT_METHODS[payment_method]
        
        await message.answer(
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_info['name']}\n"
            f"‚ô£Ô∏è –ö–∞—Ä—Ç–∞: {payment_info['number']}\n\n"
            f"ü•≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –≤–µ—Ä–Ω—ã–µ, –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} RUB"
            f"{promo_info}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(PaymentStates.waiting_for_receipt)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É",
            reply_markup=get_back_to_menu_keyboard()
        )

@router.message(PaymentStates.waiting_for_receipt, F.photo | F.document)
async def process_receipt(message: Message, state: FSMContext):
    if not message.bot or not message.from_user:
        return
        
    state_data = await state.get_data()
    amount = state_data['payment_amount']
    payment_method = state_data['payment_method']
    active_promo = state_data.get('active_promo')
    
    total_amount = amount  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –±–µ–∑ –±–æ–Ω—É—Å–∞
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_message = (
        f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\n"
        f"üë§ –û—Ç: @{message.from_user.username} ({message.from_user.id})\n"
        f"üíµ –°—É–º–º–∞: {amount} RUB\n"
        f"üè¶ –ú–µ—Ç–æ–¥: {PAYMENT_METHODS[payment_method]['name']}"
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if active_promo:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–º–æ–∫–æ–¥
        if await has_used_any_promo(message.from_user.id):
            await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ!")
            await state.clear()
            return
            
        bonus_amount = (
            amount * (active_promo['amount'] / 100) 
            if active_promo['is_percentage'] 
            else active_promo['amount']
        )
        total_amount = amount + bonus_amount
        
        admin_message += (
            f"\n\nüéü –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {active_promo['code']}\n"
            f"üìä –¢–∏–ø: {'–ü—Ä–æ—Ü–µ–Ω—Ç' if active_promo['is_percentage'] else '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞'}\n"
            f"üíé –ë–æ–Ω—É—Å: {active_promo['amount']}{'%' if active_promo['is_percentage'] else ' RUB'}\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_amount} RUB"
        )
    
    admin_message += (
        f"\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /approve {message.from_user.id} {total_amount}\n"
        f"–î–ª—è –æ—Ç–∫–∞–∑–∞: /deny {message.from_user.id} {total_amount}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = 5349222597  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    try:
        await message.forward(admin_id)
        await message.bot.send_message(admin_id, admin_message)
        
        await message.answer(
            "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.",
            reply_markup=get_start_keyboard()
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_start_keyboard()
        )
        
    await state.clear()

@router.callback_query(F.data == "activate_promo")
async def activate_promo(callback: CallbackQuery, state: FSMContext):
    if not callback.message or not callback.bot:
        return
        
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥
    await state.update_data(active_promo=None)
    
    await callback.bot.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(Form.waiting_for_promo)

@router.message(Form.waiting_for_promo)
async def process_promo(message: Message, state: FSMContext):
    if not message.text or not message.from_user:
        return
        
    promo_code = message.text.strip()  # –î–æ–±–∞–≤–ª—è–µ–º strip() –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
    if not promo_code:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥",
            reply_markup=get_profile_keyboard(message.from_user.id)
        )
        return
        
    user_id = message.from_user.id
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    bonus_amount = await activate_promo_code(user_id, promo_code)
    
    if bonus_amount:
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            f"üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_amount} RUB",
            reply_markup=get_start_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
            reply_markup=get_profile_keyboard(user_id)
        ) 